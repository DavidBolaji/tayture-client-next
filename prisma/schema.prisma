generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  ADMIN
  SUPER_ADMIN
  USER
}

enum Status {
  PENDING
  ACCEPTED
  DECLINED
}

enum WalletState {
  CREDIT
  DEBIT
  LOCKED
  UNLOCKED
  BONUS
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Applied {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [sch_id])
  jobId     String
  job       Job      @relation(fields: [jobId], references: [job_id])
  qual      String
  exp       String
  rating    Int      @default(0)
  cv        String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([schoolId])
  @@index([jobId])
}

model Assesement {
  a_id      String   @id @default(uuid())
  a_name    String
  a_email   String
  taken     Int
  path      String
  result    String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Blog {
  id              String   @id @default(uuid())
  banner          String
  title           String   @db.VarChar(300)
  except          String   @db.VarChar(300)
  text            String   @db.LongText()
  isEditor        Boolean  @default(false)
  updatedIsEditor DateTime

  blogCategoryId String
  categories     Categories @relation(fields: [blogCategoryId], references: [id])
  clicks         Int        @default(0)
  published      Boolean    @default(false)

  likes      Like[]
  blogUserId String
  user       User   @relation(fields: [blogUserId], references: [id])

  comment Comment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([blogUserId])
  @@index([blogCategoryId])
}

model Categories {
  id    String @id @default(uuid())
  title String

  blog      Blog[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id       String  @id @default(uuid())
  comment  String
  active   Boolean @default(true)
  parentId String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id])

  commentLikes CommentLike[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([blogId])
}

model CommentLike {
  id        String  @id @default(uuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  commentId String
  comment   Comment @relation(fields: [commentId], references: [id])

  @@index([userId])
  @@index([commentId])
}

model Coupoun {
  id        String   @id @default(uuid())
  value     String
  amount    Int      @default(0)
  used      Boolean  @default(false)
  couponJob Job?
  expires   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([value])
}



model CVDownloadProcess {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  started   Boolean  @default(true)
  ended     Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model DvaTransaction {
  id            String   @id @default(cuid())
  reference     String   @unique
  amount        Float
  status        String
  accountNumber String
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  

  @@index([reference])
  @@index([accountNumber])
}

model DvaAccount {
  id             String   @id @default(cuid())
  schoolId       String   @unique
  school         School   @relation(fields: [schoolId], references: [sch_id], onDelete: Cascade)
  accountNumber  String   @unique
  bankName       String
  bankCode       String
  reference      String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([schoolId])
  @@index([accountNumber])
  @@index([reference])
}

model Education {
  id         String @id @default(uuid())
  degree     String
  startYear  String
  endYear    String
  startMonth String?
  endMonth   String?
  school     String
  field      String?

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Hired {
  id     String @id @default(uuid())
  jobId  String
  job    Job    @relation(fields: [jobId], references: [job_id])
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([jobId])
  @@index([userId])
}

model Instruction {
  id         String   @id @default(uuid())
  text       String   @db.VarChar(255)
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
}

model Job {
  job_id         String   @id @default(uuid())
  job_title      String   @db.VarChar(500)
  job_role       String   @db.VarChar(50)
  job_active     String   @db.VarChar(50)
  job_desc       String?  @db.VarChar(255)
  job_min_sal    String   @db.VarChar(255)
  job_max_sal    String   @db.VarChar(255)
  job_exp        String   @db.VarChar(30)
  job_qual       String   @db.VarChar(30)
  active         Boolean  @default(true) // job visibility
  job_resumption DateTime
  job_no_hires   String
  assessmentId   String?

  noPaid      Int      @default(0)
  noScheduled Int      @default(0)
  deducted    Boolean? @default(false)

  coupon    Coupoun? @relation(fields: [coupounId], references: [id])
  coupounId String?  @unique

  status      Boolean    @default(false) // job payment
  school      School     @relation(fields: [jobSchoolId], references: [sch_id])
  jobSchoolId String
  user        User       @relation(fields: [jobUserzId], references: [id])
  jobUserzId  String
  applied     Applied[]
  matched     Matched[]
  hired       Hired[]
  schedule    Schedule[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([jobSchoolId])
  @@index([jobUserzId])
  @@index([coupounId])
}

model Like {
  id     String @id @default(uuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])
  blogId String
  blog   Blog   @relation(fields: [blogId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([blogId])
}

model Matched {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  schoolId  String
  school    School   @relation(fields: [schoolId], references: [sch_id])
  jobId     String
  job       Job      @relation(fields: [jobId], references: [job_id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([schoolId])
  @@index([jobId])
}

model Notifcation {
  id               String   @id @default(uuid())
  caption          String   @db.VarChar(50)
  msg              String   @db.VarChar(255)
  status           Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  notificationUser String
  user             User     @relation(fields: [notificationUser], references: [id])

  @@index([notificationUser])
}

model Others {
  id     String @id @default(uuid())
  text   String
  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Profile {
  id           String  @id @default(uuid())
  picture      String? @db.VarChar(255)
  cv           String? @db.VarChar(255)
  cover        String? @db.VarChar(255)
  description  String? @db.VarChar(300)
  address      String? @db.VarChar(300)
  lga          String? @db.VarChar(30)
  country      String? @db.VarChar(100)
  state        String? @db.VarChar(30)
  city         String? @db.VarChar(30)
  available    Boolean @default(false)
  workplace    String? @db.VarChar(100)
  job_location String?
  user         User    @relation(fields: [userId], references: [id])
  userId       String  @unique
}

model School {
  sch_id           String        @id @default(uuid())
  sch_logo         String?       @db.VarChar(200)
  sch_name         String        @db.VarChar(50)
  sch_no_emp       String        @db.VarChar(30)
  sch_address      String        @db.VarChar(30)
  country          String?       @default("Nigeria") @db.VarChar(100)
  sch_url          String        @db.VarChar(100)
  sch_phone        String        @db.VarChar(20)
  sch_verified     Int?          @default(0)
  sch_admin        SchoolAdmin[]
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  sch_city         String?       @db.VarChar(100)
  sch_state        String        @db.VarChar(80)
  sch_lga          String?       @db.VarChar(100)
  pending_job_post Int           @default(0)
  landmark         String?
  schUserId        String
  user             User          @relation(fields: [schUserId], references: [id])
  wallet           Wallet?
  job              Job[]
  applied          Applied[]
  matched          Matched[]
  transaction      Transaction[]
  schedule         Schedule[]
  account          DvaAccount[]

  @@index([schUserId])
}

model SchoolAdmin {
  sch_admin_id     String  @id @default(uuid())
  sch_admin_name   String  @db.VarChar(30)
  sch_admin_email  String  @db.VarChar(30)
  sch_admin_phone  String  @db.VarChar(20)
  sch_admin_active Boolean @default(false)
  school           School  @relation(fields: [schoolId], references: [sch_id], onDelete: Cascade)
  schoolId         String

  @@index([schoolId])
}

model Schedule {
  id          String        @id @default(uuid())
  date        DateTime
  mode        String
  time        DateTime
  status      Status        @default(PENDING)
  country     String?
  city        String?
  lga         String?
  state       String?
  address     String?
  link        String?
  userId      String
  instruction Instruction[]
  test        Test[]
  hiredAdmin  Boolean       @default(true)
  hiredUser   Boolean       @default(true)
  reminder    Boolean       @default(false)
  feedback    String?       @db.VarChar(200)
  reason      String?       @db.VarChar(200)
  user        User          @relation(fields: [userId], references: [id])
  schoolId    String
  school      School        @relation(fields: [schoolId], references: [sch_id])
  jobId       String
  job         Job           @relation(fields: [jobId], references: [job_id])

  @@index([userId])
  @@index([schoolId])
  @@index([jobId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @db.VarChar(300)
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Skills {
  id    String @id @default(uuid())
  skill String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Summary {
  id     String @id @default(uuid())
  text   String @db.VarChar(500)
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Test {
  id         String   @id @default(uuid())
  text       String   @db.VarChar(50)
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@index([scheduleId])
}

model Transaction {
  id       String      @id @default(uuid())
  amount   Int
  type     WalletState
  message  String
  userId   String
  user     User        @relation(fields: [userId], references: [id])
  schoolId String
  school   School      @relation(fields: [schoolId], references: [sch_id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([schoolId])
}


model User {
  id                     String   @id @default(uuid())
  role                   Role     @default(USER)
  path                   String?
  others                 Others[]
  othersText             String?
  fname                  String   @db.VarChar(30)
  lname                  String   @db.VarChar(30)
  email                  String   @unique @db.VarChar(255)
  password               String   @db.VarChar(255)
  phone                  String   @db.VarChar(16)
  validated              Int?     @default(0)
  first_time             Int?     @default(1)
  profile                Profile?
  school                 School[]
  password_reset_token   String?
  password_reset_expires Int?     @default(0)
  validation_token       String?

  blogs       Blog[]
  blogLikes   Like[]
  comment     Comment[]
  commentLike CommentLike[]

  summary   Summary?
  work      WorkHistory[]
  education Education[]
  skills    Skills[]

  wallet       Wallet[]
  accounts     Account[]
  job          Job[]
  notification Notifcation[]
  sessions     Session[]
  applied      Applied[]
  matched      Matched[]
  hired        Hired[]
  transaction  Transaction[]
  schedule     Schedule[]
  cvDownloadProcesses CVDownloadProcess[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([phone])
}

model Wallet {
  wallet_id             String @id @default(uuid())
  school                School @relation(fields: [walletSchId], references: [sch_id], onDelete: Cascade)
  walletSchId           String @unique
  user                  User   @relation(fields: [walletUserId], references: [id])
  walletUserId          String
  wallet_balance        Int    @default(0)
  wallet_locked_balance Int    @default(0)

  @@index([walletUserId])
  @@index([walletSchId])
}

model WebhookEvent {
  id            String   @id @default(cuid())
  eventType     String
  payload       Json
  processedAt   DateTime?
  status        String   @default("pending") // pending, processed, failed
  retryCount    Int      @default(0)
  idempotencyKey String  @unique
  error         String?  @db.LongText()
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([status])
  @@index([idempotencyKey])
}

model WorkHistory {
  id         String     @id @default(uuid())
  title      String     @db.VarChar(300)
  location   String     @db.VarChar(300)
  startYear  String
  endYear    String
  startMonth String
  endMonth   String
  endDate    String?
  country    String?
  city       String?
  state      String?
  lga        String?
  address    String?
  roles      WorkRole[]

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model WorkRole {
  id     String      @id @default(uuid())
  workId String
  work   WorkHistory @relation(fields: [workId], references: [id])
  role   String       @db.LongText()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workId])
}
